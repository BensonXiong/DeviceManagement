# -*- coding=gb18030 -*-
from django.shortcuts import render
from Dmanage.models import Device,History
from Dmanage.forms import DeviceForm
from django.http.response import HttpResponse, HttpResponseRedirect
from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger
from django.contrib.auth import authenticate,login
from django.contrib.auth.decorators import login_required
from django.db import transaction
from DmanageConstant import *

import util
import json





# Create your views here.
@login_required
def borrowDeviceForm(request):
    sn = request.GET.get('sn')
    device = Device.objects.get(sn=sn)
    if request.method == 'POST':
        form = DeviceForm(request.POST)
        
        if form.is_valid():
            with transaction.atomic():
                owner = form.cleaned_data['owner']
                sn = form.cleaned_data['sn']
                deviceInstance = Device.objects.get(sn=sn)
                deviceInstance.borrowedAt = util.getLocalTime()
                deviceInstance.returnAt = None
                deviceInstance.owner = owner
                deviceInstance.save()
            
                _history = History.objects.create(device=deviceInstance)
                _history.action = DmanageConstant['CheckIn']
                _history.owner = owner
                _history.dateAt = deviceInstance.borrowedAt
                _history.save()
            return HttpResponseRedirect('/list')
      
        
    else:
        device.owner = ""
        form = DeviceForm(instance = device)  
        print form  
    return render(request,'Dmanage/borrow_device_form.html',{'form':form,'device':device})
    
@login_required
def return_device(request):
    if  request.user.is_authenticated():
        sn = request.GET.get('sn')
        deviceInstance = Device.objects.get(sn=sn)
        owner = deviceInstance.owner
        if(deviceInstance.owner != DmanageConstant['SystemUser']):      
            with transaction.atomic():
                deviceInstance.owner = DmanageConstant['SystemUser']
                deviceInstance.returnAt = util.getLocalTime()
                deviceInstance.save();
        
                _history = History.objects.create(device=deviceInstance)
                _history.action = DmanageConstant['CheckOut']
                _history.owner = owner
                _history.dateAt = deviceInstance.borrowedAt
                _history.save()
        return HttpResponse(deviceInstance.returnAt)
    else:
         jsonr = json.dumps({ 'authenticated': False })
         return HttpResponse(jsonr, mimetype='application/json')

def list(request):
    return render(request,'Dmanage/device_list.html',{})

def device_history(request,device_sn_slug):
    return render(request,'Dmanage/device_history.html',{'slug':device_sn_slug})

def list_data(request):
    currentPage = int(request.GET.get('offset'))
    limit = int(request.GET.get('limit'))
    currentPage = currentPage /limit + 1
    search = request.GET.get('search')
    sortBy = request.GET.get('sort')
    orderBy = request.GET.get('order')
    if (isinstance(currentPage, int)):
        currentPage = currentPage +1
    if (search):
        searchSql = 'name like "%{0}%" or version like "%{0}%"'.format(search)
        _device = Device.objects.extra(where=[searchSql])
    else:
        _device = Device.objects.all()
    
    if (sortBy):
        if (orderBy == DmanageConstant['Asc']):
            _device = _device.order_by(sortBy)
        else:
            _device = _device.order_by("-"+ sortBy)
    paginator = Paginator(_device,limit)
    try:
        pageHistory = paginator.page(currentPage)
    except PageNotAnInteger:
        pageHistory = paginator.page(1)
    except EmptyPage:
        pageHistory = paginator.page(paginator.num_pages)
    total = paginator.count
    rows = util.preJsonEncode(pageHistory.object_list.values('name','type','version','model','imei','owner','borrowedAt','returnAt','slug','sn'))
    jData =  {"total":total,"rows":rows}
    return HttpResponse(json.dumps(jData,cls=util.JSONDateTimeEncoder), content_type="application/json")  

def device_history_data(request,device_sn_slug):
    currentPage = int(request.GET.get('offset'))
    limit = int(request.GET.get('limit'))
    currentPage = currentPage /limit + 1
    _device = Device.objects.get(sn=device_sn_slug)
    _history = History.objects.filter(device__id=_device.id).order_by('-dateAt')
    paginator = Paginator(_history,limit)
    try:
        pageHistory = paginator.page(currentPage)       
    except PageNotAnInteger:
        pageHistory = paginator.page(1)
    except EmptyPage:
        pageHistory = paginator.page(paginator.num_pages)
    total = paginator.count
    rows = util.preJsonEncode(pageHistory.object_list.values('device','owner','action','dateAt'))
    jData =  {"total":total,"rows":rows}
    return HttpResponse(json.dumps(jData,cls=util.JSONDateTimeEncoder), content_type="application/json")  


def user_login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = authenticate(username=username,password=password)

        if user:
            if user.is_active:
                login(request,user)
                return HttpResponseRedirect('/list/')
            else:
                return HttpResponse("your rango account is disabled")

        else:
            print "invalid login details: {0} {1}".format(username,password)
            return HttpResponse("Invalid login details supplied")

    else:
        return render(request,'Dmanage/login.html',{})
